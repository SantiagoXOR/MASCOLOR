/**
 * Script para depurar el flujo de datos de productos
 * 
 * Este script verifica el flujo de datos desde Supabase hasta los componentes de UI
 * para identificar d√≥nde se rompe la cadena de datos.
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  console.error('Aseg√∫rate de tener NEXT_PUBLIC_SUPABASE_URL y SUPABASE_SERVICE_KEY en .env.local');
  process.exit(1);
}

// Cliente de Supabase con clave de servicio para operaciones administrativas
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Funci√≥n para obtener productos con filtros
async function getProducts({
  category,
  brand,
  search,
  limit = 100,
  offset = 0,
}) {
  console.log('üîç Obteniendo productos con filtros:', {
    category,
    brand,
    search,
    limit,
    offset
  });
  
  let query = supabase
    .from('products')
    .select(`
      *,
      category:categories(id, slug, name),
      brand:brands(id, slug, name, logo_url)
    `)
    .order('name')
    .range(offset, offset + limit - 1);
  
  // Aplicar filtros si se proporcionan
  let categoryId = null;
  let brandId = null;
  
  if (category) {
    console.log(`üîç Aplicando filtro por categor√≠a: ${category}`);
    try {
      // Primero obtenemos el ID de la categor√≠a
      const { data: categoryData, error: categoryError } = await supabase
        .from("categories")
        .select("id")
        .eq("slug", category)
        .single();
      
      if (categoryError) {
        if (categoryError.code === 'PGRST116') {
          console.log(`‚ö†Ô∏è No se encontr√≥ la categor√≠a: ${category}`);
        } else {
          console.log(`‚ö†Ô∏è Error al obtener ID de categor√≠a:`, categoryError);
        }
      } else if (categoryData) {
        categoryId = categoryData.id;
        console.log(`‚úÖ ID de categor√≠a obtenido: ${categoryId}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Error en filtro de categor√≠a:`, error);
    }
    
    if (categoryId) {
      query = query.eq("category_id", categoryId);
    }
  }
  
  if (brand) {
    console.log(`üîç Aplicando filtro por marca: ${brand}`);
    try {
      // Primero obtenemos el ID de la marca
      const { data: brandData, error: brandError } = await supabase
        .from("brands")
        .select("id")
        .eq("slug", brand)
        .single();
      
      if (brandError) {
        if (brandError.code === 'PGRST116') {
          console.log(`‚ö†Ô∏è No se encontr√≥ la marca: ${brand}`);
        } else {
          console.log(`‚ö†Ô∏è Error al obtener ID de marca:`, brandError);
        }
      } else if (brandData) {
        brandId = brandData.id;
        console.log(`‚úÖ ID de marca obtenido: ${brandId}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Error en filtro de marca:`, error);
    }
    
    if (brandId) {
      query = query.eq("brand_id", brandId);
    }
  }
  
  if (search) {
    console.log(`üîç Aplicando filtro por b√∫squeda: ${search}`);
    query = query.ilike("name", `%${search}%`);
  }
  
  try {
    const { data, error } = await query;
    
    if (error) {
      console.log(`‚ùå Error al obtener productos:`, error);
      throw error;
    }
    
    console.log(`‚úÖ Productos obtenidos: ${data?.length || 0}`);
    
    if (data && data.length > 0) {
      console.log(`üìä Primer producto:`, {
        id: data[0].id,
        name: data[0].name,
        category: data[0].category?.name,
        brand: data[0].brand?.name,
        image_url: data[0].image_url
      });
    } else {
      console.log(`‚ö†Ô∏è No se encontraron productos con los filtros aplicados`);
    }
    
    return data || [];
  } catch (error) {
    console.log(`‚ùå Error en la consulta de productos:`, error);
    throw error;
  }
}

// Funci√≥n para obtener categor√≠as
async function getCategories() {
  console.log('üîç Obteniendo categor√≠as');
  
  try {
    const { data, error } = await supabase
      .from('categories')
      .select('*')
      .order('name');
    
    if (error) {
      console.log(`‚ùå Error al obtener categor√≠as:`, error);
      throw error;
    }
    
    console.log(`‚úÖ Categor√≠as obtenidas: ${data?.length || 0}`);
    
    if (data && data.length > 0) {
      console.log(`üìä Categor√≠as:`, data.map(c => ({ id: c.id, name: c.name, slug: c.slug })));
    }
    
    return data || [];
  } catch (error) {
    console.log(`‚ùå Error al obtener categor√≠as:`, error);
    throw error;
  }
}

// Funci√≥n para obtener marcas
async function getBrands() {
  console.log('üîç Obteniendo marcas');
  
  try {
    const { data, error } = await supabase
      .from('brands')
      .select('*')
      .order('name');
    
    if (error) {
      console.log(`‚ùå Error al obtener marcas:`, error);
      throw error;
    }
    
    console.log(`‚úÖ Marcas obtenidas: ${data?.length || 0}`);
    
    if (data && data.length > 0) {
      console.log(`üìä Marcas:`, data.map(b => ({ id: b.id, name: b.name, slug: b.slug })));
    }
    
    return data || [];
  } catch (error) {
    console.log(`‚ùå Error al obtener marcas:`, error);
    throw error;
  }
}

// Funci√≥n principal
async function debugProductsFlow() {
  try {
    console.log('üîÑ Iniciando depuraci√≥n del flujo de datos de productos...');
    
    // 1. Obtener categor√≠as
    const categories = await getCategories();
    
    // 2. Obtener marcas
    const brands = await getBrands();
    
    // 3. Obtener productos sin filtros
    console.log('\nüîç Obteniendo todos los productos (sin filtros)');
    const allProducts = await getProducts({});
    
    // 4. Obtener productos por categor√≠a
    if (categories.length > 0) {
      console.log(`\nüîç Obteniendo productos por categor√≠a: ${categories[0].slug}`);
      const productsByCategory = await getProducts({ category: categories[0].slug });
      console.log(`‚úÖ Productos encontrados para categor√≠a ${categories[0].name}: ${productsByCategory.length}`);
    }
    
    // 5. Obtener productos por marca
    if (brands.length > 0) {
      console.log(`\nüîç Obteniendo productos por marca: ${brands[0].slug}`);
      const productsByBrand = await getProducts({ brand: brands[0].slug });
      console.log(`‚úÖ Productos encontrados para marca ${brands[0].name}: ${productsByBrand.length}`);
    }
    
    console.log('\n‚úÖ Depuraci√≥n completada');
  } catch (error) {
    console.error('‚ùå Error durante la depuraci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar la funci√≥n principal
debugProductsFlow();
