// Script para eliminar productos espec√≠ficos de la base de datos
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

// Verificar que las variables de entorno est√©n configuradas
if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no configuradas');
  console.error('Aseg√∫rate de tener NEXT_PUBLIC_SUPABASE_URL y SUPABASE_SERVICE_KEY en tu archivo .env');
  process.exit(1);
}

// Cliente de Supabase con clave de servicio para operaciones administrativas
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Productos a eliminar (por slug)
const productsToDelete = [
  'membrana-ecopainting-2',
  'membrana-liquida-ecopainting'
];

// Funci√≥n principal
async function deleteProducts() {
  console.log('üîÑ Iniciando eliminaci√≥n de productos...');
  
  try {
    // Primero, obtener informaci√≥n de los productos para confirmar
    const { data: products, error: fetchError } = await supabase
      .from('products')
      .select('id, name, slug, asset_id')
      .in('slug', productsToDelete);
    
    if (fetchError) {
      throw fetchError;
    }
    
    if (!products || products.length === 0) {
      console.log('‚ö†Ô∏è No se encontraron productos con los slugs especificados');
      return;
    }
    
    console.log('üìã Productos encontrados para eliminar:');
    products.forEach(product => {
      console.log(`- ${product.name} (${product.slug}) [ID: ${product.id}]`);
    });
    
    // Confirmar eliminaci√≥n
    console.log('\nüö® Procediendo con la eliminaci√≥n...');
    
    // Eliminar productos
    for (const product of products) {
      // Eliminar el producto
      const { error: deleteError } = await supabase
        .from('products')
        .delete()
        .eq('id', product.id);
      
      if (deleteError) {
        console.error(`‚ùå Error al eliminar producto ${product.name}:`, deleteError);
      } else {
        console.log(`‚úÖ Producto eliminado: ${product.name}`);
        
        // Si el producto tiene un asset_id, tambi√©n podr√≠amos eliminar el asset
        if (product.asset_id) {
          console.log(`‚ÑπÔ∏è El producto ten√≠a un asset_id: ${product.asset_id}`);
          console.log(`‚ÑπÔ∏è Nota: El asset no se eliminar√° autom√°ticamente para evitar referencias cruzadas.`);
          console.log(`‚ÑπÔ∏è Si deseas eliminar el asset, usa el script cleanup-unused-assets.js`);
        }
      }
    }
    
    console.log('\n‚úÖ Proceso completado');
    
  } catch (error) {
    console.error('‚ùå Error durante el proceso:', error);
    process.exit(1);
  }
}

// Ejecutar la funci√≥n principal
deleteProducts();
